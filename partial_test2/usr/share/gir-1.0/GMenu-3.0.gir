<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="Gio" version="2.0"/>
  <package name="libgnome-menu-3.0"/>
  <c:include name="gmenu-tree.h"/>
  <namespace name="GMenu"
             version="3.0"
             shared-library="libgnome-menu-3.so.0"
             c:identifier-prefixes="GMenu"
             c:symbol-prefixes="gmenu">
    <class name="Tree"
           c:symbol-prefix="tree"
           c:type="GMenuTree"
           parent="GObject.Object"
           glib:type-name="GMenuTree"
           glib:get-type="gmenu_tree_get_type"
           glib:type-struct="TreeClass">
      <constructor name="new" c:identifier="gmenu_tree_new">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new #GMenuTree instance</doc>
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <parameter name="menu_basename" transfer-ownership="none">
            <doc xml:space="preserve">Basename of menu file</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <doc xml:space="preserve">Flags controlling menu content</doc>
            <type name="TreeFlags" c:type="GMenuTreeFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_for_path" c:identifier="gmenu_tree_new_for_path">
        <return-value transfer-ownership="full">
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <parameter name="menu_path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
          <parameter name="flags" transfer-ownership="none">
            <type name="TreeFlags" c:type="GMenuTreeFlags"/>
          </parameter>
        </parameters>
      </constructor>
      <function name="item_ref" c:identifier="gmenu_tree_item_ref">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The same @item, or %NULL if @item is not a valid #GMenuTreeItem</doc>
          <type name="gpointer" c:type="gpointer"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeItem</doc>
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <function name="item_unref" c:identifier="gmenu_tree_item_unref">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="item" transfer-ownership="none">
            <type name="gpointer" c:type="gpointer"/>
          </parameter>
        </parameters>
      </function>
      <method name="get_canonical_menu_path"
              c:identifier="gmenu_tree_get_canonical_menu_path">
        <doc xml:space="preserve">This function is only available if the tree has been loaded via
gmenu_tree_load_sync() or a variant thereof.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The absolute and canonicalized path to the loaded menu file</doc>
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTree</doc>
            <type name="Tree" c:type="GMenuTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory_from_path"
              c:identifier="gmenu_tree_get_directory_from_path">
        <return-value transfer-ownership="full">
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <type name="Tree" c:type="GMenuTree*"/>
          </instance-parameter>
          <parameter name="path" transfer-ownership="none">
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_entry_by_id" c:identifier="gmenu_tree_get_entry_by_id">
        <doc xml:space="preserve">Look up the entry corresponding to the given "desktop file id".</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A newly referenced #GMenuTreeEntry, or %NULL if none</doc>
          <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTree</doc>
            <type name="Tree" c:type="GMenuTree*"/>
          </instance-parameter>
          <parameter name="id" transfer-ownership="none">
            <doc xml:space="preserve">a desktop file ID</doc>
            <type name="utf8" c:type="const char*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_root_directory"
              c:identifier="gmenu_tree_get_root_directory">
        <doc xml:space="preserve">Get the root directory; you must have loaded the tree first (at
least once) via gmenu_tree_load_sync() or a variant thereof.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">Root of the tree</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTree</doc>
            <type name="Tree" c:type="GMenuTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="load_sync" c:identifier="gmenu_tree_load_sync" throws="1">
        <doc xml:space="preserve">Synchronously load the menu contents.  This function
performs a significant amount of blocking I/O if the
tree has not been loaded yet.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">%TRUE on success, %FALSE on error</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="tree" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTree</doc>
            <type name="Tree" c:type="GMenuTree*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="flags"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">Flags controlling the content of the menu.</doc>
        <type name="TreeFlags"/>
      </property>
      <property name="menu-basename"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The name of the menu file; must be a basename or a relative path. The file
will be looked up in $XDG_CONFIG_DIRS/menus/. See the Desktop Menu
specification.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="menu-path"
                writable="1"
                construct-only="1"
                transfer-ownership="none">
        <doc xml:space="preserve">The full path of the menu file. If set, GMenuTree:menu-basename will get
ignored.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <glib:signal name="changed" when="last">
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
    </class>
    <record name="TreeAlias"
            c:type="GMenuTreeAlias"
            glib:type-name="GMenuTreeAlias"
            glib:get-type="gmenu_tree_alias_get_type"
            c:symbol-prefix="tree_alias">
      <method name="get_aliased_directory"
              c:identifier="gmenu_tree_alias_get_aliased_directory">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The aliased directory entry</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">alias</doc>
            <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliased_entry"
              c:identifier="gmenu_tree_alias_get_aliased_entry">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The aliased entry</doc>
          <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">alias</doc>
            <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_aliased_item_type"
              c:identifier="gmenu_tree_alias_get_aliased_item_type">
        <return-value transfer-ownership="none">
          <type name="TreeItemType" c:type="GMenuTreeItemType"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="gmenu_tree_alias_get_directory">
        <return-value transfer-ownership="full">
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gmenu_tree_alias_get_parent">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The parent directory, or %NULL if none</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeAlias</doc>
            <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="gmenu_tree_alias_get_tree">
        <doc xml:space="preserve">Grab the tree associated with a #GMenuTreeAlias.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The #GMenuTree</doc>
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="alias" transfer-ownership="none">
            <doc xml:space="preserve">A #GMenuTreeAlias</doc>
            <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="TreeClass"
            c:type="GMenuTreeClass"
            glib:is-gtype-struct-for="Tree">
      <field name="parent_class">
        <type name="GObject.ObjectClass" c:type="GObjectClass"/>
      </field>
    </record>
    <record name="TreeDirectory"
            c:type="GMenuTreeDirectory"
            glib:type-name="GMenuTreeDirectory"
            glib:get-type="gmenu_tree_directory_get_type"
            c:symbol-prefix="tree_directory">
      <method name="get_comment"
              c:identifier="gmenu_tree_directory_get_comment">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_file_path"
              c:identifier="gmenu_tree_directory_get_desktop_file_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_generic_name"
              c:identifier="gmenu_tree_directory_get_generic_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_icon" c:identifier="gmenu_tree_directory_get_icon">
        <doc xml:space="preserve">Gets the icon for the directory.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GIcon for this directory</doc>
          <type name="Gio.Icon" c:type="GIcon*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeDirectory</doc>
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_nodisplay"
              c:identifier="gmenu_tree_directory_get_is_nodisplay">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_menu_id"
              c:identifier="gmenu_tree_directory_get_menu_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_name" c:identifier="gmenu_tree_directory_get_name">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gmenu_tree_directory_get_parent">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The parent directory, or %NULL if none</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeDirectory</doc>
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="gmenu_tree_directory_get_tree">
        <doc xml:space="preserve">Grab the tree associated with a #GMenuTreeItem.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The #GMenuTree</doc>
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve">A #GMenuTreeDirectory</doc>
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="iter" c:identifier="gmenu_tree_directory_iter">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A new iterator over the directory contents</doc>
          <type name="TreeIter" c:type="GMenuTreeIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <doc xml:space="preserve">directory</doc>
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="make_path" c:identifier="gmenu_tree_directory_make_path">
        <return-value transfer-ownership="full">
          <type name="utf8" c:type="char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="directory" transfer-ownership="none">
            <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
          </instance-parameter>
          <parameter name="entry" transfer-ownership="none">
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </parameter>
        </parameters>
      </method>
    </record>
    <record name="TreeEntry"
            c:type="GMenuTreeEntry"
            glib:type-name="GMenuTreeEntry"
            glib:get-type="gmenu_tree_entry_get_type"
            c:symbol-prefix="tree_entry">
      <method name="get_app_info" c:identifier="gmenu_tree_entry_get_app_info">
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The #GDesktopAppInfo for this entry</doc>
          <type name="Gio.DesktopAppInfo" c:type="GDesktopAppInfo*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeEntry</doc>
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_file_id"
              c:identifier="gmenu_tree_entry_get_desktop_file_id">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_desktop_file_path"
              c:identifier="gmenu_tree_entry_get_desktop_file_path">
        <return-value transfer-ownership="none">
          <type name="utf8" c:type="const char*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_excluded"
              c:identifier="gmenu_tree_entry_get_is_excluded">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_nodisplay_recurse"
              c:identifier="gmenu_tree_entry_get_is_nodisplay_recurse">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_is_unallocated"
              c:identifier="gmenu_tree_entry_get_is_unallocated">
        <return-value transfer-ownership="none">
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gmenu_tree_entry_get_parent">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The parent directory, or %NULL if none</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeEntry</doc>
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="gmenu_tree_entry_get_tree">
        <doc xml:space="preserve">Grab the tree associated with a #GMenuTreeEntry.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The #GMenuTree</doc>
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="entry" transfer-ownership="none">
            <doc xml:space="preserve">A #GMenuTreeEntry</doc>
            <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <bitfield name="TreeFlags"
              glib:type-name="GMenuTreeFlags"
              glib:get-type="gmenu_tree_flags_get_type"
              c:type="GMenuTreeFlags">
      <member name="none"
              value="0"
              c:identifier="GMENU_TREE_FLAGS_NONE"
              glib:nick="none">
      </member>
      <member name="include_excluded"
              value="1"
              c:identifier="GMENU_TREE_FLAGS_INCLUDE_EXCLUDED"
              glib:nick="include-excluded">
      </member>
      <member name="show_empty"
              value="256"
              c:identifier="GMENU_TREE_FLAGS_SHOW_EMPTY"
              glib:nick="show-empty">
      </member>
      <member name="include_nodisplay"
              value="2"
              c:identifier="GMENU_TREE_FLAGS_INCLUDE_NODISPLAY"
              glib:nick="include-nodisplay">
      </member>
      <member name="show_all_separators"
              value="512"
              c:identifier="GMENU_TREE_FLAGS_SHOW_ALL_SEPARATORS"
              glib:nick="show-all-separators">
      </member>
      <member name="sort_display_name"
              value="65536"
              c:identifier="GMENU_TREE_FLAGS_SORT_DISPLAY_NAME"
              glib:nick="sort-display-name">
      </member>
      <member name="include_unallocated"
              value="4"
              c:identifier="GMENU_TREE_FLAGS_INCLUDE_UNALLOCATED,"
              glib:nick="include-unallocated">
      </member>
    </bitfield>
    <record name="TreeHeader"
            c:type="GMenuTreeHeader"
            glib:type-name="GMenuTreeHeader"
            glib:get-type="gmenu_tree_header_get_type"
            c:symbol-prefix="tree_header">
      <method name="get_directory"
              c:identifier="gmenu_tree_header_get_directory">
        <return-value transfer-ownership="full">
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="header" transfer-ownership="none">
            <type name="TreeHeader" c:type="GMenuTreeHeader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_parent" c:identifier="gmenu_tree_header_get_parent">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The parent directory, or %NULL if none</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeHeader</doc>
            <type name="TreeHeader" c:type="GMenuTreeHeader*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="gmenu_tree_header_get_tree">
        <doc xml:space="preserve">Grab the tree associated with a #GMenuTreeHeader.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The #GMenuTree</doc>
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="header" transfer-ownership="none">
            <doc xml:space="preserve">A #GMenuTreeHeader</doc>
            <type name="TreeHeader" c:type="GMenuTreeHeader*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <enumeration name="TreeItemType" c:type="GMenuTreeItemType">
      <member name="invalid" value="0" c:identifier="GMENU_TREE_ITEM_INVALID">
      </member>
      <member name="directory"
              value="1"
              c:identifier="GMENU_TREE_ITEM_DIRECTORY">
      </member>
      <member name="entry" value="2" c:identifier="GMENU_TREE_ITEM_ENTRY">
      </member>
      <member name="separator"
              value="3"
              c:identifier="GMENU_TREE_ITEM_SEPARATOR">
      </member>
      <member name="header" value="4" c:identifier="GMENU_TREE_ITEM_HEADER">
      </member>
      <member name="alias" value="5" c:identifier="GMENU_TREE_ITEM_ALIAS">
      </member>
    </enumeration>
    <record name="TreeIter"
            c:type="GMenuTreeIter"
            glib:type-name="GMenuTreeIter"
            glib:get-type="gmenu_tree_iter_get_type"
            c:symbol-prefix="tree_iter">
      <method name="get_alias" c:identifier="gmenu_tree_iter_get_alias">
        <doc xml:space="preserve">This method may only be called if gmenu_tree_iter_next()
returned GMENU_TREE_ITEM_ALIAS.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An alias</doc>
          <type name="TreeAlias" c:type="GMenuTreeAlias*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_directory"
              c:identifier="gmenu_tree_iter_get_directory">
        <doc xml:space="preserve">This method may only be called if gmenu_tree_iter_next()
returned GMENU_TREE_ITEM_DIRECTORY.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A directory</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_entry" c:identifier="gmenu_tree_iter_get_entry">
        <doc xml:space="preserve">This method may only be called if gmenu_tree_iter_next()
returned GMENU_TREE_ITEM_ENTRY.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">An entry</doc>
          <type name="TreeEntry" c:type="GMenuTreeEntry*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_header" c:identifier="gmenu_tree_iter_get_header">
        <doc xml:space="preserve">This method may only be called if gmenu_tree_iter_next()
returned GMENU_TREE_ITEM_HEADER.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A header</doc>
          <type name="TreeHeader" c:type="GMenuTreeHeader*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_separator"
              c:identifier="gmenu_tree_iter_get_separator">
        <doc xml:space="preserve">This method may only be called if gmenu_tree_iter_next()
returned #GMENU_TREE_ITEM_SEPARATOR.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">A separator</doc>
          <type name="TreeSeparator" c:type="GMenuTreeSeparator*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="next" c:identifier="gmenu_tree_iter_next">
        <doc xml:space="preserve">Change the iterator to the next item, and return its type.  If
there are no more items, %GMENU_TREE_ITEM_INVALID is returned.</doc>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve">The type of the next item that can be retrived from the iterator</doc>
          <type name="TreeItemType" c:type="GMenuTreeItemType"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="ref" c:identifier="gmenu_tree_iter_ref" introspectable="0">
        <doc xml:space="preserve">Increment the reference count of @iter</doc>
        <return-value transfer-ownership="full">
          <type name="TreeIter" c:type="GMenuTreeIter*"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="unref"
              c:identifier="gmenu_tree_iter_unref"
              introspectable="0">
        <doc xml:space="preserve">Decrement the reference count of @iter</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="iter" transfer-ownership="none">
            <doc xml:space="preserve">iter</doc>
            <type name="TreeIter" c:type="GMenuTreeIter*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
    <record name="TreeSeparator"
            c:type="GMenuTreeSeparator"
            glib:type-name="GMenuTreeSeparator"
            glib:get-type="gmenu_tree_separator_get_type"
            c:symbol-prefix="tree_separator">
      <method name="get_parent" c:identifier="gmenu_tree_separator_get_parent">
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The parent directory, or %NULL if none</doc>
          <type name="TreeDirectory" c:type="GMenuTreeDirectory*"/>
        </return-value>
        <parameters>
          <instance-parameter name="separator" transfer-ownership="none">
            <doc xml:space="preserve">a #GMenuTreeSeparator</doc>
            <type name="TreeSeparator" c:type="GMenuTreeSeparator*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_tree" c:identifier="gmenu_tree_separator_get_tree">
        <doc xml:space="preserve">Grab the tree associated with a #GMenuTreeSeparator.</doc>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve">The #GMenuTree</doc>
          <type name="Tree" c:type="GMenuTree*"/>
        </return-value>
        <parameters>
          <instance-parameter name="separator" transfer-ownership="none">
            <doc xml:space="preserve">A #GMenuTreeSeparator</doc>
            <type name="TreeSeparator" c:type="GMenuTreeSeparator*"/>
          </instance-parameter>
        </parameters>
      </method>
    </record>
  </namespace>
</repository>
