/* colord.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "Cd", gir_namespace = "Colord", gir_version = "1.0", lower_case_cprefix = "cd__")]
namespace Cd {
	[CCode (cheader_filename = "colord.h", type_id = "cd_client_get_type ()")]
	public class Client : GLib.Object {
		[CCode (cname = "cd_client_new", has_construct_function = false)]
		public Client ();
		[CCode (cname = "cd_client_connect")]
		public async bool connect (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_connect_sync")]
		public bool connect_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_create_device")]
		public async Cd.Device create_device (string id, Cd.ObjectScope scope, GLib.HashTable<void*,void*> properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_create_device_sync")]
		public Cd.Device create_device_sync (string id, Cd.ObjectScope scope, GLib.HashTable<void*,void*> properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_create_profile")]
		public async Cd.Profile create_profile (string id, Cd.ObjectScope scope, GLib.HashTable<void*,void*> properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_create_profile_sync")]
		public Cd.Profile create_profile_sync (string id, Cd.ObjectScope scope, GLib.HashTable<void*,void*> properties, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_delete_device")]
		public async bool delete_device (Cd.Device device, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_delete_device_sync")]
		public bool delete_device_sync (Cd.Device device, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_delete_profile")]
		public async bool delete_profile (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_delete_profile_sync")]
		public bool delete_profile_sync (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "cd_client_find_device")]
		public async Cd.Device find_device (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_device_by_property")]
		public async Cd.Device find_device_by_property (string key, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_device_by_property_sync")]
		public Cd.Device find_device_by_property_sync (string key, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_device_sync")]
		public Cd.Device find_device_sync (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_profile")]
		public async Cd.Profile find_profile (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_profile_by_filename")]
		public async Cd.Profile find_profile_by_filename (string filename, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_profile_by_filename_sync")]
		public Cd.Profile find_profile_by_filename_sync (string filename, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_find_profile_sync")]
		public Cd.Profile find_profile_sync (string id, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_connected")]
		public bool get_connected ();
		[CCode (cname = "cd_client_get_daemon_version")]
		public unowned string get_daemon_version ();
		[CCode (cname = "cd_client_get_devices")]
		public async GLib.GenericArray<Cd.Device> get_devices (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_devices_by_kind")]
		public async GLib.GenericArray<Cd.Device> get_devices_by_kind (Cd.DeviceKind kind, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_devices_by_kind_sync")]
		public GLib.GenericArray<void*> get_devices_by_kind_sync (Cd.DeviceKind kind, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_devices_sync")]
		public GLib.GenericArray<void*> get_devices_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_has_server")]
		public bool get_has_server ();
		[CCode (cname = "cd_client_get_profiles")]
		public async GLib.GenericArray<Cd.Profile> get_profiles (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_profiles_sync")]
		public GLib.GenericArray<void*> get_profiles_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_sensors")]
		public async GLib.GenericArray<Cd.Sensor> get_sensors (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_sensors_sync")]
		public GLib.GenericArray<void*> get_sensors_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_standard_space")]
		public async Cd.Profile get_standard_space (Cd.StandardSpace standard_space, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_get_standard_space_sync")]
		public Cd.Profile get_standard_space_sync (Cd.StandardSpace standard_space, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_import_profile")]
		public async Cd.Profile import_profile (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_client_import_profile_sync")]
		public Cd.Profile import_profile_sync (GLib.File file, GLib.Cancellable? cancellable) throws GLib.Error;
		[NoAccessorMethod]
		public string connected { owned get; }
		[NoAccessorMethod]
		public string daemon_version { owned get; }
		public virtual signal void changed ();
		public virtual signal void device_added (Cd.Device device);
		public virtual signal void device_changed (Cd.Device device);
		public virtual signal void device_removed (Cd.Device device);
		public virtual signal void profile_added (Cd.Profile profile);
		public virtual signal void profile_changed (Cd.Profile profile);
		public virtual signal void profile_removed (Cd.Profile profile);
		public virtual signal void sensor_added (Cd.Sensor sensor);
		public virtual signal void sensor_changed (Cd.Sensor sensor);
		public virtual signal void sensor_removed (Cd.Sensor sensor);
	}
	[CCode (cheader_filename = "colord.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cd_color_rgb_get_type ()")]
	[Compact]
	public class ColorRGB {
		public double B;
		public double G;
		public double R;
		[CCode (cname = "cd_color_rgb_dup")]
		public Cd.ColorRGB dup ();
	}
	[CCode (cheader_filename = "colord.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cd_color_xyz_get_type ()")]
	[Compact]
	public class ColorXYZ {
		public double X;
		public double Y;
		public double Z;
		[CCode (cname = "cd_color_xyz_dup")]
		public Cd.ColorXYZ dup ();
	}
	[CCode (cheader_filename = "colord.h", copy_function = "g_boxed_copy", free_function = "g_boxed_free", type_id = "cd_color_yxy_get_type ()")]
	[Compact]
	public class ColorYxy {
		public double Y;
		public double x;
		public double y;
		[CCode (cname = "cd_color_yxy_dup")]
		public Cd.ColorYxy dup ();
	}
	[CCode (cheader_filename = "colord.h", type_id = "cd_device_get_type ()")]
	public class Device : GLib.Object {
		[CCode (cname = "cd_device_new", has_construct_function = false)]
		public Device ();
		[CCode (cname = "cd_device_add_profile")]
		public async bool add_profile (Cd.DeviceRelation relation, Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_add_profile_sync")]
		public bool add_profile_sync (Cd.DeviceRelation relation, Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_connect")]
		public async bool connect (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_connect_sync")]
		public bool connect_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_equal")]
		public bool equal (Cd.Device device2);
		[CCode (cname = "cd_device_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "cd_device_get_colorspace")]
		public Cd.Colorspace get_colorspace ();
		[CCode (cname = "cd_device_get_connected")]
		public bool get_connected ();
		[CCode (cname = "cd_device_get_created")]
		public uint64 get_created ();
		[CCode (cname = "cd_device_get_default_profile")]
		public Cd.Profile get_default_profile ();
		[CCode (cname = "cd_device_get_format")]
		public unowned string get_format ();
		[CCode (cname = "cd_device_get_id")]
		public unowned string get_id ();
		[CCode (cname = "cd_device_get_kind")]
		public Cd.DeviceKind get_kind ();
		[CCode (cname = "cd_device_get_metadata")]
		public GLib.HashTable<void*,void*> get_metadata ();
		[CCode (cname = "cd_device_get_metadata_item")]
		public unowned string get_metadata_item (string key);
		[CCode (cname = "cd_device_get_mode")]
		public Cd.DeviceMode get_mode ();
		[CCode (cname = "cd_device_get_model")]
		public unowned string get_model ();
		[CCode (cname = "cd_device_get_modified")]
		public uint64 get_modified ();
		[CCode (cname = "cd_device_get_object_path")]
		public unowned string get_object_path ();
		[CCode (cname = "cd_device_get_owner")]
		public uint get_owner ();
		[CCode (cname = "cd_device_get_profile_for_qualifiers")]
		public async Cd.Profile get_profile_for_qualifiers (string qualifiers, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_get_profile_for_qualifiers_sync")]
		public Cd.Profile get_profile_for_qualifiers_sync (string qualifiers, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_get_profile_relation")]
		public async Cd.DeviceRelation get_profile_relation (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_get_profile_relation_sync")]
		public Cd.DeviceRelation get_profile_relation_sync (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_get_profiles")]
		public GLib.GenericArray<Cd.Profile> get_profiles ();
		[CCode (array_length = false, array_null_terminated = true, cname = "cd_device_get_profiling_inhibitors")]
		public unowned string[] get_profiling_inhibitors ();
		[CCode (cname = "cd_device_get_scope")]
		public Cd.ObjectScope get_scope ();
		[CCode (cname = "cd_device_get_serial")]
		public unowned string get_serial ();
		[CCode (cname = "cd_device_get_vendor")]
		public unowned string get_vendor ();
		[CCode (cname = "cd_device_kind_from_string")]
		public static Cd.DeviceKind kind_from_string (string kind);
		[CCode (cname = "cd_device_kind_to_profile_kind")]
		public static Cd.ProfileKind kind_to_profile_kind (Cd.DeviceKind device_kind);
		[CCode (cname = "cd_device_kind_to_string")]
		public static unowned string kind_to_string (Cd.DeviceKind kind_enum);
		[CCode (cname = "cd_device_make_profile_default")]
		public async bool make_profile_default (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_make_profile_default_sync")]
		public bool make_profile_default_sync (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_mode_from_string")]
		public static Cd.DeviceMode mode_from_string (string device_mode);
		[CCode (cname = "cd_device_mode_to_string")]
		public static unowned string mode_to_string (Cd.DeviceMode device_mode);
		[CCode (cname = "cd_device_profiling_inhibit")]
		public async bool profiling_inhibit (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_profiling_inhibit_sync")]
		public bool profiling_inhibit_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_profiling_uninhibit")]
		public async bool profiling_uninhibit (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_profiling_uninhibit_sync")]
		public bool profiling_uninhibit_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_relation_from_string")]
		public static Cd.DeviceRelation relation_from_string (string device_relation);
		[CCode (cname = "cd_device_relation_to_string")]
		public static unowned string relation_to_string (Cd.DeviceRelation device_relation);
		[CCode (cname = "cd_device_remove_profile")]
		public async bool remove_profile (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_remove_profile_sync")]
		public bool remove_profile_sync (Cd.Profile profile, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_colorspace_sync")]
		public bool set_colorspace_sync (Cd.Colorspace colorspace, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_kind_sync")]
		public bool set_kind_sync (Cd.DeviceKind kind, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_mode_sync")]
		public bool set_mode_sync (Cd.DeviceMode mode, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_model_sync")]
		public bool set_model_sync (string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_object_path")]
		public void set_object_path (string object_path);
		[CCode (cname = "cd_device_set_property")]
		public async bool set_property (string key, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_property_sync")]
		public bool set_property_sync (string key, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_serial_sync")]
		public bool set_serial_sync (string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_set_vendor_sync")]
		public bool set_vendor_sync (string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_device_to_string")]
		public string to_string ();
		[CCode (cname = "cd_device_new_with_object_path", has_construct_function = false)]
		public Device.with_object_path (string object_path);
		[NoAccessorMethod]
		public uint colorspace { get; }
		[NoAccessorMethod]
		public string connected { owned get; }
		[NoAccessorMethod]
		public uint64 created { get; }
		[NoAccessorMethod]
		public string format { owned get; }
		[NoAccessorMethod]
		public string id { owned get; }
		[NoAccessorMethod]
		public uint kind { get; }
		[NoAccessorMethod]
		public uint mode { get; }
		[NoAccessorMethod]
		public string model { owned get; }
		[NoAccessorMethod]
		public uint64 modified { get; }
		[NoAccessorMethod]
		public string object_path { owned get; set construct; }
		[NoAccessorMethod]
		public uint owner { get; }
		[CCode (array_length = false, array_null_terminated = true)]
		[NoAccessorMethod]
		public string[] profiling_inhibitors { owned get; }
		[NoAccessorMethod]
		public uint scope { get; }
		[NoAccessorMethod]
		public string serial { owned get; }
		[NoAccessorMethod]
		public string vendor { owned get; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "colord.h", type_id = "cd_it8_get_type ()")]
	public class It8 : GLib.Object {
		[CCode (cname = "cd_it8_new", has_construct_function = false)]
		public It8 ();
		[CCode (cname = "cd_it8_add_data")]
		public void add_data (Cd.ColorRGB rgb, Cd.ColorXYZ xyz);
		[CCode (cname = "cd_it8_add_option")]
		public void add_option (string option);
		[CCode (cname = "cd_it8_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "cd_it8_get_data_item")]
		public bool get_data_item (uint idx, Cd.ColorRGB rgb, Cd.ColorXYZ xyz);
		[CCode (cname = "cd_it8_get_data_size")]
		public uint get_data_size ();
		[CCode (cname = "cd_it8_get_instrument")]
		public unowned string get_instrument ();
		[CCode (cname = "cd_it8_get_kind")]
		public Cd.It8Kind get_kind ();
		[CCode (cname = "cd_it8_get_matrix")]
		public Cd.Mat3x3 get_matrix ();
		[CCode (cname = "cd_it8_get_normalized")]
		public bool get_normalized ();
		[CCode (cname = "cd_it8_get_originator")]
		public unowned string get_originator ();
		[CCode (cname = "cd_it8_get_reference")]
		public unowned string get_reference ();
		[CCode (cname = "cd_it8_get_spectral")]
		public bool get_spectral ();
		[CCode (cname = "cd_it8_get_title")]
		public unowned string get_title ();
		[CCode (cname = "cd_it8_has_option")]
		public bool has_option (string option);
		[CCode (cname = "cd_it8_load_from_data")]
		public bool load_from_data (string data, size_t size) throws GLib.Error;
		[CCode (cname = "cd_it8_load_from_file")]
		public bool load_from_file (GLib.File file) throws GLib.Error;
		[CCode (cname = "cd_it8_save_to_file")]
		public bool save_to_file (GLib.File file) throws GLib.Error;
		[CCode (cname = "cd_it8_set_instrument")]
		public void set_instrument (string instrument);
		[CCode (cname = "cd_it8_set_kind")]
		public void set_kind (Cd.It8Kind kind);
		[CCode (cname = "cd_it8_set_matrix")]
		public void set_matrix (Cd.Mat3x3 matrix);
		[CCode (cname = "cd_it8_set_normalized")]
		public void set_normalized (bool normalized);
		[CCode (cname = "cd_it8_set_originator")]
		public void set_originator (string originator);
		[CCode (cname = "cd_it8_set_reference")]
		public void set_reference (string reference);
		[CCode (cname = "cd_it8_set_spectral")]
		public void set_spectral (bool spectral);
		[CCode (cname = "cd_it8_set_title")]
		public void set_title (string title);
		[CCode (cname = "cd_it8_utils_calculate_ccmx")]
		public bool utils_calculate_ccmx (Cd.It8 it8_measured, Cd.It8 it8_ccmx) throws GLib.Error;
		[CCode (cname = "cd_it8_new_with_kind", has_construct_function = false)]
		public It8.with_kind (Cd.It8Kind kind);
		[NoAccessorMethod]
		public string instrument { owned get; }
		[NoAccessorMethod]
		public uint kind { get; set; }
		[NoAccessorMethod]
		public bool normalized { get; }
		[NoAccessorMethod]
		public string originator { owned get; }
		[NoAccessorMethod]
		public string reference { owned get; }
		[NoAccessorMethod]
		public bool spectral { get; }
		[NoAccessorMethod]
		public string title { owned get; }
	}
	[CCode (cheader_filename = "colord.h", type_id = "cd_profile_get_type ()")]
	public class Profile : GLib.Object {
		[CCode (cname = "cd_profile_new", has_construct_function = false)]
		public Profile ();
		[CCode (cname = "cd_profile_connect")]
		public async bool connect (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_connect_sync")]
		public bool connect_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_equal")]
		public bool equal (Cd.Profile profile2);
		[CCode (cname = "cd_profile_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "cd_profile_get_age")]
		public int64 get_age ();
		[CCode (cname = "cd_profile_get_colorspace")]
		public Cd.Colorspace get_colorspace ();
		[CCode (cname = "cd_profile_get_connected")]
		public bool get_connected ();
		[CCode (cname = "cd_profile_get_created")]
		public int64 get_created ();
		[CCode (cname = "cd_profile_get_filename")]
		public unowned string get_filename ();
		[CCode (cname = "cd_profile_get_format")]
		public unowned string get_format ();
		[CCode (cname = "cd_profile_get_has_vcgt")]
		public bool get_has_vcgt ();
		[CCode (cname = "cd_profile_get_id")]
		public unowned string get_id ();
		[CCode (cname = "cd_profile_get_is_system_wide")]
		public bool get_is_system_wide ();
		[CCode (cname = "cd_profile_get_kind")]
		public Cd.ProfileKind get_kind ();
		[CCode (cname = "cd_profile_get_metadata")]
		public GLib.HashTable<void*,void*> get_metadata ();
		[CCode (cname = "cd_profile_get_metadata_item")]
		public unowned string get_metadata_item (string key);
		[CCode (cname = "cd_profile_get_object_path")]
		public unowned string get_object_path ();
		[CCode (cname = "cd_profile_get_owner")]
		public uint get_owner ();
		[CCode (cname = "cd_profile_get_qualifier")]
		public unowned string get_qualifier ();
		[CCode (cname = "cd_profile_get_scope")]
		public Cd.ObjectScope get_scope ();
		[CCode (cname = "cd_profile_get_title")]
		public unowned string get_title ();
		[CCode (cname = "cd_profile_has_access")]
		public bool has_access ();
		[CCode (cname = "cd_profile_install_system_wide")]
		public async bool install_system_wide (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_install_system_wide_sync")]
		public bool install_system_wide_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_kind_from_string")]
		public static Cd.ProfileKind kind_from_string (string profile_kind);
		[CCode (cname = "cd_profile_kind_to_string")]
		public static unowned string kind_to_string (Cd.ProfileKind profile_kind);
		[CCode (cname = "cd_profile_set_filename_sync")]
		public bool set_filename_sync (string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_set_object_path")]
		public void set_object_path (string object_path);
		[CCode (cname = "cd_profile_set_property")]
		public async bool set_property (string key, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_set_property_sync")]
		public bool set_property_sync (string key, string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_set_qualifier_sync")]
		public bool set_qualifier_sync (string value, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_profile_to_string")]
		public string to_string ();
		[CCode (cname = "cd_profile_new_with_object_path", has_construct_function = false)]
		public Profile.with_object_path (string object_path);
		[NoAccessorMethod]
		public string colorspace { owned get; }
		[NoAccessorMethod]
		public string connected { owned get; }
		[NoAccessorMethod]
		public int64 created { get; }
		[NoAccessorMethod]
		public string filename { owned get; }
		[NoAccessorMethod]
		public string format { owned get; }
		[NoAccessorMethod]
		public string has_vcgt { owned get; }
		[NoAccessorMethod]
		public string id { owned get; }
		[NoAccessorMethod]
		public string is_system_wide { owned get; }
		[NoAccessorMethod]
		public string kind { owned get; }
		[NoAccessorMethod]
		public string object_path { owned get; set construct; }
		[NoAccessorMethod]
		public uint owner { get; }
		[NoAccessorMethod]
		public string qualifier { owned get; }
		[NoAccessorMethod]
		public uint scope { get; }
		[NoAccessorMethod]
		public string title { owned get; }
		public virtual signal void changed ();
	}
	[CCode (cheader_filename = "colord.h", type_id = "cd_sensor_get_type ()")]
	public class Sensor : GLib.Object {
		[CCode (cname = "cd_sensor_new", has_construct_function = false)]
		public Sensor ();
		[CCode (cname = "cd_sensor_cap_from_string")]
		public static Cd.SensorCap cap_from_string (string sensor_cap);
		[CCode (cname = "cd_sensor_cap_to_string")]
		public static unowned string cap_to_string (Cd.SensorCap sensor_cap);
		[CCode (cname = "cd_sensor_connect")]
		public async bool connect (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_connect_sync")]
		public bool connect_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_equal")]
		public bool equal (Cd.Sensor sensor2);
		[CCode (cname = "cd_sensor_error_quark")]
		public static GLib.Quark error_quark ();
		[CCode (cname = "cd_sensor_get_caps")]
		public uint get_caps ();
		[CCode (cname = "cd_sensor_get_connected")]
		public bool get_connected ();
		[CCode (cname = "cd_sensor_get_kind")]
		public Cd.SensorKind get_kind ();
		[CCode (cname = "cd_sensor_get_locked")]
		public bool get_locked ();
		[CCode (cname = "cd_sensor_get_mode")]
		public Cd.SensorCap get_mode ();
		[CCode (cname = "cd_sensor_get_model")]
		public unowned string get_model ();
		[CCode (cname = "cd_sensor_get_native")]
		public bool get_native ();
		[CCode (cname = "cd_sensor_get_object_path")]
		public unowned string get_object_path ();
		[CCode (cname = "cd_sensor_get_option")]
		public unowned string get_option (string key);
		[CCode (cname = "cd_sensor_get_options")]
		public GLib.HashTable<void*,void*> get_options ();
		[CCode (cname = "cd_sensor_get_sample")]
		public async Cd.ColorXYZ get_sample (Cd.SensorCap cap, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_get_sample_sync")]
		public Cd.ColorXYZ get_sample_sync (Cd.SensorCap cap, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_get_serial")]
		public unowned string get_serial ();
		[CCode (cname = "cd_sensor_get_state")]
		public Cd.SensorState get_state ();
		[CCode (cname = "cd_sensor_get_vendor")]
		public unowned string get_vendor ();
		[CCode (cname = "cd_sensor_has_cap")]
		public bool has_cap (Cd.SensorCap cap);
		[CCode (cname = "cd_sensor_kind_from_string")]
		public static Cd.SensorKind kind_from_string (string sensor_kind);
		[CCode (cname = "cd_sensor_kind_to_string")]
		public static unowned string kind_to_string (Cd.SensorKind sensor_kind);
		[CCode (cname = "cd_sensor_lock")]
		public async bool @lock (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_lock_sync")]
		public bool lock_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_set_object_path")]
		public void set_object_path (string object_path);
		[CCode (cname = "cd_sensor_set_options")]
		public async bool set_options (GLib.HashTable<void*,void*> values, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_set_options_sync")]
		public bool set_options_sync (GLib.HashTable<void*,void*> values, GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_state_from_string")]
		public static Cd.SensorState state_from_string (string sensor_state);
		[CCode (cname = "cd_sensor_state_to_string")]
		public static unowned string state_to_string (Cd.SensorState sensor_state);
		[CCode (cname = "cd_sensor_to_string")]
		public string to_string ();
		[CCode (cname = "cd_sensor_unlock")]
		public async bool unlock (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_unlock_sync")]
		public bool unlock_sync (GLib.Cancellable? cancellable) throws GLib.Error;
		[CCode (cname = "cd_sensor_new_with_object_path", has_construct_function = false)]
		public Sensor.with_object_path (string object_path);
		[NoAccessorMethod]
		public string connected { owned get; }
		[NoAccessorMethod]
		public string kind { owned get; }
		[NoAccessorMethod]
		public string locked { owned get; }
		[NoAccessorMethod]
		public string mode { owned get; }
		[NoAccessorMethod]
		public string model { owned get; }
		[NoAccessorMethod]
		public string native { owned get; }
		[NoAccessorMethod]
		public string object_path { owned get; set construct; }
		[NoAccessorMethod]
		public string serial { owned get; }
		[NoAccessorMethod]
		public string state { owned get; }
		[NoAccessorMethod]
		public string vendor { owned get; }
		public virtual signal void button_pressed ();
	}
	[CCode (cheader_filename = "colord.h", has_type_id = false)]
	public struct ColorLab {
		public double L;
		public double a;
		public double b;
	}
	[CCode (cheader_filename = "colord.h", has_type_id = false)]
	public struct ColorRGB8 {
		public uint8 R;
		public uint8 G;
		public uint8 B;
	}
	[CCode (cheader_filename = "colord.h", has_type_id = false)]
	public struct Mat3x3 {
		public double m00;
		public double m01;
		public double m02;
		public double m10;
		public double m11;
		public double m12;
		public double m20;
		public double m21;
		public double m22;
	}
	[CCode (cheader_filename = "colord.h", has_type_id = false)]
	public struct Vec3 {
		public double v0;
		public double v1;
		public double v2;
		[CCode (cname = "cd_vec3_add")]
		public void add (Cd.Vec3 src2, Cd.Vec3 dest);
		[CCode (cname = "cd_vec3_clear")]
		public void clear ();
		[CCode (cname = "cd_vec3_copy")]
		public void copy (Cd.Vec3 dest);
		[CCode (cname = "cd_vec3_get_data")]
		public double get_data ();
		[CCode (cname = "cd_vec3_init")]
		public void init (double v0, double v1, double v2);
		[CCode (cname = "cd_vec3_scalar_multiply")]
		public void scalar_multiply (double value, Cd.Vec3 dest);
		[CCode (cname = "cd_vec3_squared_error")]
		public double squared_error (Cd.Vec3 src2);
		[CCode (cname = "cd_vec3_subtract")]
		public void subtract (Cd.Vec3 src2, Cd.Vec3 dest);
		[CCode (cname = "cd_vec3_to_string")]
		public string to_string ();
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_CLIENT_ERROR_")]
	public enum ClientError {
		FAILED,
		ALREADY_EXISTS,
		FILE_INVALID,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_COLORSPACE_")]
	public enum Colorspace {
		UNKNOWN,
		XYZ,
		LAB,
		LUV,
		YCBCR,
		YXY,
		RGB,
		GRAY,
		HSV,
		CMYK,
		CMY,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_DEVICE_ERROR_")]
	public enum DeviceError {
		FAILED,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_DEVICE_KIND_")]
	public enum DeviceKind {
		UNKNOWN,
		DISPLAY,
		SCANNER,
		PRINTER,
		CAMERA,
		WEBCAM,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_DEVICE_MODE_")]
	public enum DeviceMode {
		UNKNOWN,
		PHYSICAL,
		VIRTUAL,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_DEVICE_RELATION_")]
	public enum DeviceRelation {
		UNKNOWN,
		SOFT,
		HARD,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_IT8_ERROR_")]
	public enum It8Error {
		FAILED,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_IT8_KIND_")]
	public enum It8Kind {
		UNKNOWN,
		TI1,
		TI3,
		CCMX,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_OBJECT_SCOPE_")]
	public enum ObjectScope {
		UNKNOWN,
		NORMAL,
		TEMP,
		DISK,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_PROFILE_ERROR_")]
	public enum ProfileError {
		FAILED,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_PROFILE_KIND_")]
	public enum ProfileKind {
		UNKNOWN,
		INPUT_DEVICE,
		DISPLAY_DEVICE,
		OUTPUT_DEVICE,
		DEVICELINK,
		COLORSPACE_CONVERSION,
		ABSTRACT,
		NAMED_COLOR,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_RENDERING_INTENT_")]
	public enum RenderingIntent {
		UNKNOWN,
		PERCEPTUAL,
		RELATIVE_COLORIMETRIC,
		SATURATION,
		ABSOLUTE_COLORIMETRIC,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_SENSOR_CAP_")]
	public enum SensorCap {
		UNKNOWN,
		LCD,
		CRT,
		PRINTER,
		SPOT,
		PROJECTOR,
		AMBIENT,
		CALIBRATION,
		LED,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_SENSOR_ERROR_")]
	public enum SensorError {
		FAILED,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_SENSOR_KIND_")]
	public enum SensorKind {
		UNKNOWN,
		DUMMY,
		HUEY,
		COLOR_MUNKI,
		SPYDER,
		DTP20,
		DTP22,
		DTP41,
		DTP51,
		DTP94,
		SPECTRO_SCAN,
		I1_PRO,
		COLORIMTRE_HCFR,
		I1_DISPLAY3,
		COLORHUG,
		SPYDER2,
		SPYDER3,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_SENSOR_STATE_")]
	public enum SensorState {
		UNKNOWN,
		STARTING,
		IDLE,
		MEASURING,
		BUSY,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cprefix = "CD_STANDARD_SPACE_")]
	public enum StandardSpace {
		UNKNOWN,
		SRGB,
		ADOBE_RGB,
		PROPHOTO_RGB,
		LAST
	}
	[CCode (cheader_filename = "colord.h", cname = "CD_CLIENT_PROPERTY_DAEMON_VERSION")]
	public const string CLIENT_PROPERTY_DAEMON_VERSION;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_METADATA_XRANDR_NAME")]
	public const string DEVICE_METADATA_XRANDR_NAME;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_COLORSPACE")]
	public const string DEVICE_PROPERTY_COLORSPACE;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_CREATED")]
	public const string DEVICE_PROPERTY_CREATED;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_FORMAT")]
	public const string DEVICE_PROPERTY_FORMAT;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_ID")]
	public const string DEVICE_PROPERTY_ID;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_KIND")]
	public const string DEVICE_PROPERTY_KIND;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_METADATA")]
	public const string DEVICE_PROPERTY_METADATA;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_MODE")]
	public const string DEVICE_PROPERTY_MODE;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_MODEL")]
	public const string DEVICE_PROPERTY_MODEL;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_MODIFIED")]
	public const string DEVICE_PROPERTY_MODIFIED;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_OWNER")]
	public const string DEVICE_PROPERTY_OWNER;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_PROFILES")]
	public const string DEVICE_PROPERTY_PROFILES;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_PROFILING_INHIBITORS")]
	public const string DEVICE_PROPERTY_PROFILING_INHIBITORS;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_SCOPE")]
	public const string DEVICE_PROPERTY_SCOPE;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_SERIAL")]
	public const string DEVICE_PROPERTY_SERIAL;
	[CCode (cheader_filename = "colord.h", cname = "CD_DEVICE_PROPERTY_VENDOR")]
	public const string DEVICE_PROPERTY_VENDOR;
	[CCode (cheader_filename = "colord.h", cname = "CD_MAJOR_VERSION")]
	public const int MAJOR_VERSION;
	[CCode (cheader_filename = "colord.h", cname = "CD_MICRO_VERSION")]
	public const int MICRO_VERSION;
	[CCode (cheader_filename = "colord.h", cname = "CD_MINOR_VERSION")]
	public const int MINOR_VERSION;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_ACCURACY_DE76_AVG")]
	public const string PROFILE_METADATA_ACCURACY_DE76_AVG;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_ACCURACY_DE76_MAX")]
	public const string PROFILE_METADATA_ACCURACY_DE76_MAX;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_ACCURACY_DE76_RMS")]
	public const string PROFILE_METADATA_ACCURACY_DE76_RMS;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CMF_BINARY")]
	public const string PROFILE_METADATA_CMF_BINARY;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CMF_PRODUCT")]
	public const string PROFILE_METADATA_CMF_PRODUCT;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CMF_VERSION")]
	public const string PROFILE_METADATA_CMF_VERSION;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CONNECTION_TYPE")]
	public const string PROFILE_METADATA_CONNECTION_TYPE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CONNECTION_TYPE_DISPLAYPORT")]
	public const string PROFILE_METADATA_CONNECTION_TYPE_DISPLAYPORT;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CONNECTION_TYPE_DVI")]
	public const string PROFILE_METADATA_CONNECTION_TYPE_DVI;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CONNECTION_TYPE_HDMI")]
	public const string PROFILE_METADATA_CONNECTION_TYPE_HDMI;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CONNECTION_TYPE_INTERNAL")]
	public const string PROFILE_METADATA_CONNECTION_TYPE_INTERNAL;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_CONNECTION_TYPE_VGA")]
	public const string PROFILE_METADATA_CONNECTION_TYPE_VGA;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_DATA_SOURCE")]
	public const string PROFILE_METADATA_DATA_SOURCE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_DATA_SOURCE_CALIB")]
	public const string PROFILE_METADATA_DATA_SOURCE_CALIB;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_DATA_SOURCE_EDID")]
	public const string PROFILE_METADATA_DATA_SOURCE_EDID;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_DATA_SOURCE_STANDARD")]
	public const string PROFILE_METADATA_DATA_SOURCE_STANDARD;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_DATA_SOURCE_TEST")]
	public const string PROFILE_METADATA_DATA_SOURCE_TEST;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_EDID_MD5")]
	public const string PROFILE_METADATA_EDID_MD5;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_EDID_MNFT")]
	public const string PROFILE_METADATA_EDID_MNFT;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_EDID_MODEL")]
	public const string PROFILE_METADATA_EDID_MODEL;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_EDID_SERIAL")]
	public const string PROFILE_METADATA_EDID_SERIAL;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_EDID_VENDOR")]
	public const string PROFILE_METADATA_EDID_VENDOR;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_FILE_CHECKSUM")]
	public const string PROFILE_METADATA_FILE_CHECKSUM;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_MAPPING_DEVICE_ID")]
	public const string PROFILE_METADATA_MAPPING_DEVICE_ID;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_MAPPING_FORMAT")]
	public const string PROFILE_METADATA_MAPPING_FORMAT;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_MAPPING_QUALIFIER")]
	public const string PROFILE_METADATA_MAPPING_QUALIFIER;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_MEASUREMENT_DEVICE")]
	public const string PROFILE_METADATA_MEASUREMENT_DEVICE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_SCREEN_BRIGHTNESS")]
	public const string PROFILE_METADATA_SCREEN_BRIGHTNESS;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_SCREEN_SURFACE")]
	public const string PROFILE_METADATA_SCREEN_SURFACE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_SCREEN_SURFACE_GLOSSY")]
	public const string PROFILE_METADATA_SCREEN_SURFACE_GLOSSY;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_SCREEN_SURFACE_MATTE")]
	public const string PROFILE_METADATA_SCREEN_SURFACE_MATTE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_METADATA_STANDARD_SPACE")]
	public const string PROFILE_METADATA_STANDARD_SPACE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_COLORSPACE")]
	public const string PROFILE_PROPERTY_COLORSPACE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_CREATED")]
	public const string PROFILE_PROPERTY_CREATED;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_FILENAME")]
	public const string PROFILE_PROPERTY_FILENAME;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_FORMAT")]
	public const string PROFILE_PROPERTY_FORMAT;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_HAS_VCGT")]
	public const string PROFILE_PROPERTY_HAS_VCGT;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_ID")]
	public const string PROFILE_PROPERTY_ID;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_IS_SYSTEM_WIDE")]
	public const string PROFILE_PROPERTY_IS_SYSTEM_WIDE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_KIND")]
	public const string PROFILE_PROPERTY_KIND;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_METADATA")]
	public const string PROFILE_PROPERTY_METADATA;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_OWNER")]
	public const string PROFILE_PROPERTY_OWNER;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_QUALIFIER")]
	public const string PROFILE_PROPERTY_QUALIFIER;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_SCOPE")]
	public const string PROFILE_PROPERTY_SCOPE;
	[CCode (cheader_filename = "colord.h", cname = "CD_PROFILE_PROPERTY_TITLE")]
	public const string PROFILE_PROPERTY_TITLE;
	[CCode (cheader_filename = "colord.h", cname = "cd_color_clear_xyz")]
	public static void color_clear_xyz (Cd.ColorXYZ dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_convert_rgb8_to_rgb")]
	public static void color_convert_rgb8_to_rgb (Cd.ColorRGB8 src, Cd.ColorRGB dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_convert_rgb_to_rgb8")]
	public static void color_convert_rgb_to_rgb8 (Cd.ColorRGB src, Cd.ColorRGB8 dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_convert_xyz_to_yxy")]
	public static void color_convert_xyz_to_yxy (Cd.ColorXYZ src, Cd.ColorYxy dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_convert_yxy_to_xyz")]
	public static void color_convert_yxy_to_xyz (Cd.ColorYxy src, Cd.ColorXYZ dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_copy_rgb")]
	public static void color_copy_rgb (Cd.ColorRGB src, Cd.ColorRGB dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_copy_xyz")]
	public static void color_copy_xyz (Cd.ColorXYZ src, Cd.ColorXYZ dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_copy_yxy")]
	public static void color_copy_yxy (Cd.ColorYxy src, Cd.ColorYxy dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_set_rgb")]
	public static void color_set_rgb (Cd.ColorRGB dest, double R, double G, double B);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_set_xyz")]
	public static void color_set_xyz (Cd.ColorXYZ dest, double X, double Y, double Z);
	[CCode (cheader_filename = "colord.h", cname = "cd_color_set_yxy")]
	public static void color_set_yxy (Cd.ColorYxy dest, double Y, double x, double y);
	[CCode (cheader_filename = "colord.h", cname = "cd_colorspace_from_string")]
	public static Cd.Colorspace colorspace_from_string (string colorspace);
	[CCode (cheader_filename = "colord.h", cname = "cd_colorspace_to_string")]
	public static unowned string colorspace_to_string (Cd.Colorspace colorspace);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_clear")]
	public static void mat33_clear (Cd.Mat3x3 src);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_copy")]
	public static void mat33_copy (Cd.Mat3x3 src, Cd.Mat3x3 dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_determinant")]
	public static double mat33_determinant (Cd.Mat3x3 src);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_get_data")]
	public static double mat33_get_data (Cd.Mat3x3 src);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_matrix_multiply")]
	public static void mat33_matrix_multiply (Cd.Mat3x3 mat_src1, Cd.Mat3x3 mat_src2, Cd.Mat3x3 mat_dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_reciprocal")]
	public static bool mat33_reciprocal (Cd.Mat3x3 src, Cd.Mat3x3 dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_scalar_multiply")]
	public static void mat33_scalar_multiply (Cd.Mat3x3 mat_src, double value, Cd.Mat3x3 mat_dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_set_identity")]
	public static void mat33_set_identity (Cd.Mat3x3 src);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_to_string")]
	public static string mat33_to_string (Cd.Mat3x3 src);
	[CCode (cheader_filename = "colord.h", cname = "cd_mat33_vector_multiply")]
	public static void mat33_vector_multiply (Cd.Mat3x3 mat_src, Cd.Vec3 vec_src, Cd.Vec3 vec_dest);
	[CCode (cheader_filename = "colord.h", cname = "cd_object_scope_from_string")]
	public static Cd.ObjectScope object_scope_from_string (string object_scope);
	[CCode (cheader_filename = "colord.h", cname = "cd_object_scope_to_string")]
	public static unowned string object_scope_to_string (Cd.ObjectScope object_scope);
	[CCode (cheader_filename = "colord.h", cname = "cd_rendering_intent_from_string")]
	public static Cd.RenderingIntent rendering_intent_from_string (string rendering_intent);
	[CCode (cheader_filename = "colord.h", cname = "cd_rendering_intent_to_string")]
	public static unowned string rendering_intent_to_string (Cd.RenderingIntent rendering_intent);
	[CCode (cheader_filename = "colord.h", cname = "cd_standard_space_from_string")]
	public static Cd.StandardSpace standard_space_from_string (string standard_space);
	[CCode (cheader_filename = "colord.h", cname = "cd_standard_space_to_string")]
	public static unowned string standard_space_to_string (Cd.StandardSpace standard_space);
}
